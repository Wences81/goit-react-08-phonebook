{"version":3,"sources":["../node_modules/react-bootstrap/esm/ListGroupItem.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","view/ContactsView.jsx"],"names":["ListGroupItem","React","ref","bsPrefix","active","disabled","eventKey","className","variant","action","as","props","useBootstrapPrefix","useNavItem","key","makeEventKey","href","navItemProps","meta","handleClick","useEventCallback","event","preventDefault","stopPropagation","onClick","undefined","tabIndex","Component","_jsx","classNames","isActive","displayName","getContacts","state","contacts","entities","getFilter","filter","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","ContactList","dispatch","useDispatch","useSelector","useEffect","contactsOperations","length","Container","map","id","number","Button","onDeleteContacts","ContactForm","useState","setName","setNumber","handleChange","e","target","value","Form","onSubmit","find","checkName","alert","Group","Label","Row","Col","Control","type","pattern","title","required","onChange","placeholder","Filter","style","display","changeFilter","onBlur","ContactsView","params","fetchContactsAction"],"mappings":"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","file":"static/js/contacts-page.d88184f7.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useNavItem } from '@restart/ui/NavItem';\nimport { makeEventKey } from '@restart/ui/SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ListGroupItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  disabled,\n  eventKey,\n  className,\n  variant,\n  action,\n  as,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  const [navItemProps, meta] = useNavItem({\n    key: makeEventKey(eventKey, props.href),\n    active,\n    ...props\n  });\n  const handleClick = useEventCallback(event => {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    navItemProps.onClick(event);\n  });\n\n  if (disabled && props.tabIndex === undefined) {\n    props.tabIndex = -1;\n    props['aria-disabled'] = true;\n  } // eslint-disable-next-line no-nested-ternary\n\n\n  const Component = as || (action ? props.href ? 'a' : 'button' : 'div');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    ...navItemProps,\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, meta.isActive && 'active', disabled && 'disabled', variant && `${bsPrefix}-${variant}`, action && `${bsPrefix}-action`)\n  });\n});\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = (state) => state.contacts.entities;\nexport const getFilter = (state) => state.contacts.filter;\nexport const getLoading = (state) => state.contacts.isLoading;\nexport const getError = (state) => state.contacts.error;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Container, Button, ListGroupItem } from \"react-bootstrap\";\nimport * as contactsOperations from \"../../redux/contacts/contacts-operations\";\nimport { getFilteredContacts } from \"../../redux/contacts/contacts-selectors\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getFilteredContacts);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContactsAction());\n  }, [dispatch]);\n\n  const onDeleteContacts = (id) =>\n    dispatch(contactsOperations.deleteContactsAction(id));\n\n  if (!contacts.length) {\n    return <h2 className=\"home-title\">Контактов в списке нет</h2>;\n  } else {\n    return (\n      <Container>\n        <h2>Список контактов</h2>\n        {contacts.map(({ id, name, number }) => (\n          <ListGroupItem key={id}>\n            {name} : {number}\n            <Button onClick={() => onDeleteContacts(id)}>Удалить</Button>\n          </ListGroupItem>\n        ))}\n      </Container>\n    );\n  }\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  onDeleteContacts: PropTypes.func,\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as contactsOperations from \"../../redux/contacts/contacts-operations\";\nimport { getContacts } from \"../../redux/contacts/contacts-selectors\";\nimport { Container, Form, Col, Row, Button } from \"react-bootstrap\";\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const onSubmit = (name, number) =>\n    dispatch(contactsOperations.addContactsAction({ name, number }));\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    name === \"name\" ? setName(value) : setNumber(value);\n  };\n\n  const checkName = (name) => {\n    return contacts.find(\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (checkName(name)) {\n      alert(`${name} is already in contacts`);\n    } else {\n      onSubmit(name, number);\n      setName(\"\");\n      setNumber(\"\");\n    }\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group>\n          <h2>Добавить новый контакт</h2>\n          <Form.Label>Имя</Form.Label>\n          <Row>\n            <Col>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                value={name}\n                onChange={handleChange}\n                placeholder=\"Введите имя\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Label>Телефон</Form.Label>\n              <Form.Control\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                required\n                value={number}\n                onChange={handleChange}\n                placeholder=\"Введите телефон\"\n              />\n            </Col>\n          </Row>\n        </Form.Group>\n        <Row>\n          <Col>\n            <Button type=\"submit\">Добавить в список контактов</Button>\n          </Col>\n        </Row>\n      </Form>\n    </Container>\n  );\n}\n","import { useSelector, useDispatch } from \"react-redux\";\nimport {\n  getFilter,\n  getContacts,\n} from \"../../redux/contacts/contacts-selectors\";\nimport { changeFilter } from \"../../redux/contacts/contacts-actions\";\nimport PropTypes from \"prop-types\";\nimport { Form, Container } from \"react-bootstrap\";\n\nexport default function Filter() {\n  const contacts = useSelector(getContacts);\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeHandler = (e) => dispatch(changeFilter(e.target.value));\n\n  const onBlurHandler = () => dispatch(changeFilter(\"\"));\n\n  return (\n    <>\n      {!contacts.length && <h2 style={{ display: \"none\" }}>Поиск</h2>}\n      {contacts.length && (\n        <Container>\n          <Form>\n            <Form.Group>\n              <h2>Найти контакт по имени</h2>\n              <Form.Control\n                type=\"text\"\n                value={value}\n                onChange={onChangeHandler}\n                onBlur={onBlurHandler}\n              />\n            </Form.Group>\n          </Form>\n        </Container>\n      )}\n      ;\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n};\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchContactsAction } from \"../redux/contacts/contacts-operations\";\nimport ContactList from \"../components/ContactList/ContactList\";\nimport ContactForm from \"../components/ContactForm/ContactForm\";\nimport Filter from \"../components/Filter/Filter\";\n\nexport default function ContactsView(params) {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(fetchContactsAction()), [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"sourceRoot":""}